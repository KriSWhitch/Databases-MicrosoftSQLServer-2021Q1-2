use MAV_UNIVERTMP;
-- task 1
SELECT min(AUDITORIUM.AUDITORIUM_CAPACITY) [Минимальная вместимость аудиторий]
FROM AUDITORIUM;

SELECT max(AUDITORIUM.AUDITORIUM_CAPACITY) [Максимальная вместимость аудиторий]
FROM AUDITORIUM;

SELECT avg(AUDITORIUM.AUDITORIUM_CAPACITY) [Средняя вместимость аудиторий]
FROM AUDITORIUM;

SELECT sum(AUDITORIUM.AUDITORIUM_CAPACITY) [Суммарная вместимость аудиторий]
FROM AUDITORIUM;

SELECT count(AUDITORIUM.AUDITORIUM_NAME) [Количество аудиторий]
FROM AUDITORIUM;

-- task 2
SELECT AUDITORIUM_TYPE.AUDITORIUM_TYPE, max(AUDITORIUM.AUDITORIUM_CAPACITY) [Максимальная вместимость]
FROM AUDITORIUM inner join AUDITORIUM_TYPE 
ON AUDITORIUM.AUDITORIUM_TYPE = AUDITORIUM_TYPE.AUDITORIUM_TYPE GROUP BY AUDITORIUM_TYPE.AUDITORIUM_TYPE;

SELECT AUDITORIUM_TYPE.AUDITORIUM_TYPE, min(AUDITORIUM.AUDITORIUM_CAPACITY) [Минимальная вместимость]
FROM AUDITORIUM inner join AUDITORIUM_TYPE 
ON AUDITORIUM.AUDITORIUM_TYPE = AUDITORIUM_TYPE.AUDITORIUM_TYPE GROUP BY AUDITORIUM_TYPE.AUDITORIUM_TYPE;

SELECT AUDITORIUM_TYPE.AUDITORIUM_TYPE, avg(AUDITORIUM.AUDITORIUM_CAPACITY) [Средняя вместимость]
FROM AUDITORIUM inner join AUDITORIUM_TYPE 
ON AUDITORIUM.AUDITORIUM_TYPE = AUDITORIUM_TYPE.AUDITORIUM_TYPE GROUP BY AUDITORIUM_TYPE.AUDITORIUM_TYPE;

SELECT AUDITORIUM_TYPE.AUDITORIUM_TYPE, sum(AUDITORIUM.AUDITORIUM_CAPACITY) [Суммарная вместимость]
FROM AUDITORIUM inner join AUDITORIUM_TYPE 
ON AUDITORIUM.AUDITORIUM_TYPE = AUDITORIUM_TYPE.AUDITORIUM_TYPE GROUP BY AUDITORIUM_TYPE.AUDITORIUM_TYPE;

SELECT AUDITORIUM_TYPE.AUDITORIUM_TYPE, count(AUDITORIUM.AUDITORIUM_NAME) [Количество аудиторий]
FROM AUDITORIUM inner join AUDITORIUM_TYPE 
ON AUDITORIUM.AUDITORIUM_TYPE = AUDITORIUM_TYPE.AUDITORIUM_TYPE GROUP BY AUDITORIUM_TYPE.AUDITORIUM_TYPE;

-- task 3
SELECT CASE 
WHEN PROGRESS.NOTE between 4 and 5 then '4-5'
when PROGRESS.NOTE between 6 and 7 then '6-7'
when PROGRESS.NOTE = 8 then '8'
when PROGRESS.NOTE = 9 then '9'
end [Оценки], count(PROGRESS.NOTE)[Количество]
FROM PROGRESS GROUP BY CASE 
WHEN PROGRESS.NOTE between 4 and 5 then '4-5'
when PROGRESS.NOTE between 6 and 7 then '6-7'
when PROGRESS.NOTE = 8 then '8'
when PROGRESS.NOTE = 9 then '9'
end
ORDER BY [Количество];

-- task 4
SELECT FACULTY.FACULTY, GROUPS.PROFESSION, STUDENT.IDGROUP, round(avg(cast(PROGRESS.NOTE as float(4))), 2) [Средний балл в группе]
FROM FACULTY inner join 
GROUPS ON FACULTY.FACULTY = GROUPS.FACULTY inner join
STUDENT ON GROUPS.IDGROUP = STUDENT.IDGROUP inner join
PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE (PROGRESS.SUBJECTS like '%БД%' or PROGRESS.SUBJECTS like '%ОАиП%')
GROUP BY FACULTY.FACULTY, GROUPS.PROFESSION, STUDENT.IDGROUP;

-- task 5
SELECT FACULTY_NAME
FROM FACULTY
WHERE not exists (SELECT * FROM PULPIT WHERE FACULTY.FACULTY = PULPIT.FACULTY)

-- task 6
SELECT top 1
	(SELECT avg(PROGRESS.NOTE) from PROGRESS
		WHERE PROGRESS.SUBJECTS like 'ОаиП')[ОАиП],
	(SELECT avg(PROGRESS.NOTE) from PROGRESS
		WHERE PROGRESS.SUBJECTS like 'БД')[БД],
	(SELECT avg(PROGRESS.NOTE) from PROGRESS
		WHERE PROGRESS.SUBJECTS like 'СУБД')[СУБД]
FROM PROGRESS;

-- task 7

SELECT PROGRESS.NOTE, PROGRESS.IDSTUDENT, PROGRESS.SUBJECTS
FROM PROGRESS WHERE PROGRESS.NOTE >=all (
SELECT PROGRESS.NOTE FROM PROGRESS WHERE PROGRESS.IDSTUDENT like '101%'
);

-- task 8
SELECT PROGRESS.NOTE, PROGRESS.IDSTUDENT, PROGRESS.SUBJECTS
FROM PROGRESS WHERE PROGRESS.NOTE >any (
SELECT PROGRESS.NOTE FROM PROGRESS WHERE PROGRESS.IDSTUDENT like '101%'
);

