use MAV_UNIVERTMP;
-- task 1
SELECT min(AUDITORIUM.AUDITORIUM_CAPACITY) [Минимальная вместимость аудиторий]
FROM AUDITORIUM;

SELECT max(AUDITORIUM.AUDITORIUM_CAPACITY) [Максимальная вместимость аудиторий]
FROM AUDITORIUM;

SELECT avg(AUDITORIUM.AUDITORIUM_CAPACITY) [Средняя вместимость аудиторий]
FROM AUDITORIUM;

SELECT sum(AUDITORIUM.AUDITORIUM_CAPACITY) [Суммарная вместимость аудиторий]
FROM AUDITORIUM;

SELECT count(AUDITORIUM.AUDITORIUM_NAME) [Количество аудиторий]
FROM AUDITORIUM;

-- task 2
SELECT AUDITORIUM_TYPE.AUDITORIUM_TYPE, max(AUDITORIUM.AUDITORIUM_CAPACITY) [Максимальная вместимость]
FROM AUDITORIUM inner join AUDITORIUM_TYPE 
ON AUDITORIUM.AUDITORIUM_TYPE = AUDITORIUM_TYPE.AUDITORIUM_TYPE GROUP BY AUDITORIUM_TYPE.AUDITORIUM_TYPE;

SELECT AUDITORIUM_TYPE.AUDITORIUM_TYPE, min(AUDITORIUM.AUDITORIUM_CAPACITY) [Минимальная вместимость]
FROM AUDITORIUM inner join AUDITORIUM_TYPE 
ON AUDITORIUM.AUDITORIUM_TYPE = AUDITORIUM_TYPE.AUDITORIUM_TYPE GROUP BY AUDITORIUM_TYPE.AUDITORIUM_TYPE;

SELECT AUDITORIUM_TYPE.AUDITORIUM_TYPE, avg(AUDITORIUM.AUDITORIUM_CAPACITY) [Средняя вместимость]
FROM AUDITORIUM inner join AUDITORIUM_TYPE 
ON AUDITORIUM.AUDITORIUM_TYPE = AUDITORIUM_TYPE.AUDITORIUM_TYPE GROUP BY AUDITORIUM_TYPE.AUDITORIUM_TYPE;

SELECT AUDITORIUM_TYPE.AUDITORIUM_TYPE, sum(AUDITORIUM.AUDITORIUM_CAPACITY) [Суммарная вместимость]
FROM AUDITORIUM inner join AUDITORIUM_TYPE 
ON AUDITORIUM.AUDITORIUM_TYPE = AUDITORIUM_TYPE.AUDITORIUM_TYPE GROUP BY AUDITORIUM_TYPE.AUDITORIUM_TYPE;

SELECT AUDITORIUM_TYPE.AUDITORIUM_TYPE, count(AUDITORIUM.AUDITORIUM_NAME) [Количество аудиторий]
FROM AUDITORIUM inner join AUDITORIUM_TYPE 
ON AUDITORIUM.AUDITORIUM_TYPE = AUDITORIUM_TYPE.AUDITORIUM_TYPE GROUP BY AUDITORIUM_TYPE.AUDITORIUM_TYPE;

-- task 3
SELECT CASE 
WHEN PROGRESS.NOTE between 4 and 5 then '4-5'
when PROGRESS.NOTE between 6 and 7 then '6-7'
when PROGRESS.NOTE = 8 then '8'
when PROGRESS.NOTE = 9 then '9'
end [Оценки], count(PROGRESS.NOTE)[Количество]
FROM PROGRESS GROUP BY CASE 
WHEN PROGRESS.NOTE between 4 and 5 then '4-5'
when PROGRESS.NOTE between 6 and 7 then '6-7'
when PROGRESS.NOTE = 8 then '8'
when PROGRESS.NOTE = 9 then '9'
end
ORDER BY [Количество];

-- task 4
SELECT FACULTY.FACULTY, GROUPS.PROFESSION, STUDENT.IDGROUP, round(avg(cast(PROGRESS.NOTE as float(4))), 2) [Средний балл в группе]
FROM FACULTY inner join 
GROUPS ON FACULTY.FACULTY = GROUPS.FACULTY inner join
STUDENT ON GROUPS.IDGROUP = STUDENT.IDGROUP inner join
PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE (PROGRESS.SUBJECTS like '%БД%' or PROGRESS.SUBJECTS like '%ОАиП%')
GROUP BY FACULTY.FACULTY, GROUPS.PROFESSION, STUDENT.IDGROUP;

-- task 5
SELECT FACULTY.FACULTY, GROUPS.PROFESSION, STUDENT.IDGROUP, round(avg(cast(PROGRESS.NOTE as float(4))), 2) [Средний балл в группе]
FROM FACULTY inner join 
GROUPS ON FACULTY.FACULTY = GROUPS.FACULTY inner join
STUDENT ON GROUPS.IDGROUP = STUDENT.IDGROUP inner join
PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE FACULTY.FACULTY like '%ТОВ%'
GROUP BY ROLLUP(FACULTY.FACULTY, GROUPS.PROFESSION, STUDENT.IDGROUP);

-- task 6
SELECT FACULTY.FACULTY, GROUPS.PROFESSION, STUDENT.IDGROUP, round(avg(cast(PROGRESS.NOTE as float(4))), 2) [Средний балл в группе]
FROM FACULTY inner join 
GROUPS ON FACULTY.FACULTY = GROUPS.FACULTY inner join
STUDENT ON GROUPS.IDGROUP = STUDENT.IDGROUP inner join
PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE FACULTY.FACULTY like '%ТОВ%'
GROUP BY CUBE(FACULTY.FACULTY, GROUPS.PROFESSION, STUDENT.IDGROUP);

-- task 7

SELECT FACULTY.FACULTY, GROUPS.PROFESSION, STUDENT.IDGROUP, round(avg(cast(PROGRESS.NOTE as float(4))), 2) [Средний балл в группе]
FROM FACULTY inner join 
GROUPS ON FACULTY.FACULTY = GROUPS.FACULTY inner join
STUDENT ON GROUPS.IDGROUP = STUDENT.IDGROUP inner join
PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE FACULTY.FACULTY like '%ТОВ%'
GROUP BY FACULTY.FACULTY, GROUPS.PROFESSION, STUDENT.IDGROUP
	UNION
SELECT FACULTY.FACULTY, GROUPS.PROFESSION, STUDENT.IDGROUP, round(avg(cast(PROGRESS.NOTE as float(4))), 2) [Средний балл в группе]
FROM FACULTY inner join 
GROUPS ON FACULTY.FACULTY = GROUPS.FACULTY inner join
STUDENT ON GROUPS.IDGROUP = STUDENT.IDGROUP inner join
PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE FACULTY.FACULTY like '%ТОВ%'
GROUP BY FACULTY.FACULTY, GROUPS.PROFESSION, STUDENT.IDGROUP

-- task 8
SELECT FACULTY.FACULTY, GROUPS.PROFESSION, STUDENT.IDGROUP, round(avg(cast(PROGRESS.NOTE as float(4))), 2) [Средний балл в группе]
FROM FACULTY inner join 
GROUPS ON FACULTY.FACULTY = GROUPS.FACULTY inner join
STUDENT ON GROUPS.IDGROUP = STUDENT.IDGROUP inner join
PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE FACULTY.FACULTY like '%ТОВ%'
GROUP BY FACULTY.FACULTY, GROUPS.PROFESSION, STUDENT.IDGROUP
	INTERSECT
SELECT FACULTY.FACULTY, GROUPS.PROFESSION, STUDENT.IDGROUP, round(avg(cast(PROGRESS.NOTE as float(4))), 2) [Средний балл в группе]
FROM FACULTY inner join 
GROUPS ON FACULTY.FACULTY = GROUPS.FACULTY inner join
STUDENT ON GROUPS.IDGROUP = STUDENT.IDGROUP inner join
PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE FACULTY.FACULTY like '%ХТиТ%'
GROUP BY FACULTY.FACULTY, GROUPS.PROFESSION, STUDENT.IDGROUP;

-- task 9
SELECT FACULTY.FACULTY, GROUPS.PROFESSION, STUDENT.IDGROUP, round(avg(cast(PROGRESS.NOTE as float(4))), 2) [Средний балл в группе]
FROM FACULTY inner join 
GROUPS ON FACULTY.FACULTY = GROUPS.FACULTY inner join
STUDENT ON GROUPS.IDGROUP = STUDENT.IDGROUP inner join
PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE FACULTY.FACULTY like '%ТОВ%'
GROUP BY FACULTY.FACULTY, GROUPS.PROFESSION, STUDENT.IDGROUP
	EXCEPT
SELECT FACULTY.FACULTY, GROUPS.PROFESSION, STUDENT.IDGROUP, round(avg(cast(PROGRESS.NOTE as float(4))), 2) [Средний балл в группе]
FROM FACULTY inner join 
GROUPS ON FACULTY.FACULTY = GROUPS.FACULTY inner join
STUDENT ON GROUPS.IDGROUP = STUDENT.IDGROUP inner join
PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE FACULTY.FACULTY like '%ХТиТ%'
GROUP BY FACULTY.FACULTY, GROUPS.PROFESSION, STUDENT.IDGROUP;

-- task 10
SELECT PROGRESS.SUBJECTS, count(PROGRESS.IDSTUDENT)[Количество студентов]
FROM PROGRESS
GROUP BY PROGRESS.SUBJECTS, PROGRESS.NOTE
HAVING PROGRESS.NOTE like '8' or PROGRESS.NOTE like '9';